mydata$distance <- apply(mat, 1, min)/1000
head(mydata)
max(stormData$distance)
max(mydata$distance)
plot(mydata$x,mydata$y)
plot(mydata$x[mydata$distance>5],mydata$y[mydata$distance>5])
plot(mydata$x[mydata$distance<5],mydata$y[mydata$distance<5])
mydata <- mydata[mydata$distance >5, ]
#############################################################################
# Manx Shearwater Tracking Study
# - note that some birds were tracked in 2 seasons
#############################################################################
# packages
library(sp)
library(rgdal)
library(adehabitatLT)
library(momentuHMM)
library(dplyr)
library(data.table)
#############################################################################
# load data
#############################################################################
rm(list=ls())
# setwd("C:\\Users\\adamdkane\\Desktop\\Science\\Manx Shearwater")
setwd("C:/Users/akane/Desktop/Science/Manuscripts/Manx Shearwater tracking study\\ManxTracks")
mydata<-read.csv("manxHI.csv",header = T,sep=",")
head(mydata)
#############################################################################
# drop unused columns
#############################################################################
drops <- c("Altitude","Speed","Course","Type","Distance","Essential","ID","Year","count")
mydata<-mydata[ , !(names(mydata) %in% drops)]
head(mydata)
#############################################################################
# combine date and time into one column and covert time to class POSIXct
#############################################################################
mydata$dateTime<-as.POSIXct(paste(mydata$Date, mydata$Time), format="%d/%m/%Y %H:%M:%S")
#mydata$Time<-as.POSIXct(mydata$Time, format="%H:%M:%S")
head(mydata)
#############################################################################
# remove rows with no values for latitude or longitude
#############################################################################
mydata<-mydata[complete.cases(mydata$Latitude),]
mydata<-mydata[complete.cases(mydata$Longitude),]
head(mydata)
#coordinates(mydata) = ~Longitude+Latitude
# plot(mydata$Longitude, mydata$Latitude)
#############################################################################
# count the number of relocations per bird
#############################################################################
sapply(split(mydata$Latitude,mydata$Bird_ID),length)
length(levels(mydata$Bird_ID))
#############################################################################
# drop the birds that have fewer than 20 relocations
#############################################################################
mydata <- mydata[!(as.numeric(mydata$Bird_ID) %in% which(table(mydata$Bird_ID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$Bird_ID))
head(mydata)
#############################################################################
# measure the time difference between points for each bird ID using dplyr
# - Group your data by ID
# - Compute time diffs between each timestamp in your group (the 1st time diff is NA)
# - Create a new ID that counts no of prior time gaps that are large (e.g. > 20 mins)
#############################################################################
mydata<- mydata %>%
group_by(Bird_ID) %>%
mutate(timeDiff = c(NA, difftime(tail(dateTime, -1), head(dateTime, -1), units="min"))) %>%
mutate(newID = paste0(Bird_ID, cumsum(!is.na(timeDiff) & timeDiff > 20))) %>%
ungroup()
mydata<-data.frame(mydata)
mydata$newID<-as.factor(mydata$newID)
head(mydata)
length(levels(factor(mydata$newID)))
#############################################################################
# drop the new bird IDs that have fewer than 20 relocations
#############################################################################
sapply(split(mydata$Latitude,mydata$newID),length)
length(levels(mydata$newID))
mydata <- mydata[!(as.numeric(mydata$newID) %in% which(table(mydata$newID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$newID))
head(mydata)
#############################################################################
# create a trajectory object using adehabitatLT
#############################################################################
tr<-as.ltraj(data.frame(X=mydata$Longitude,Y=mydata$Latitude),date=mydata$dateTime,id=mydata$newID,typeII=T) #create trajectory
tstep<-300 #time step we want for the interpolation, in seconds, 300 secs = 5 mins
newtr<-redisltraj(tr, u=tstep, type = "time")
#############################################################################
# Prep for HMM
#############################################################################
mydata<-ld(newtr)
names(mydata)[names(mydata) == 'x'] <- 'lon'
names(mydata)[names(mydata) == 'y'] <- 'lat'
head(mydata)
tail(mydata)
# prep data for upload to movebank
mydataMovebank<-mydata[,c("id","lon","lat","date")]
# write.csv(mydataMovebank,file="mydataMovebank.csv")
#############################################################################
# Load in data with Movebank covariates
#############################################################################
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\Manx Shearwater tracking study\\ManxTracks\\manxMovebank")
mydata<-read.csv("manxMovebank.csv",header = T,sep = ",")
head(mydata)
mydata<-mydata[,c("location.long","location.lat","individual.local.identifier","ETOPO1.Elevation", "MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A")]
head(mydata)
names(mydata)[names(mydata) == 'location.long'] <- 'long'
names(mydata)[names(mydata) == 'location.lat'] <- 'lat'
names(mydata)[names(mydata) == 'individual.local.identifier'] <- 'ID'
names(mydata)[names(mydata) == 'ETOPO1.Elevation'] <- 'bath'
names(mydata)[names(mydata) == 'MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A'] <- 'chloroMonth'
head(mydata)
# drop the levels that don't have chlorophyll data, no need to do this for bathymetry
length(mydata$ID)
# remove NAs chlorophyll values
mydata <- mydata %>%
dplyr:: mutate(chloroMonth = ifelse(is.na(chloroMonth),0,chloroMonth))
mydata<-group_by(mydata, ID) %>%
dplyr::mutate(first2 = min(which(chloroMonth == 0 | row_number() == n()))) %>%
filter(row_number() <= first2) %>%
dplyr::select(-first2)
length(mydata$ID)
mydata<-droplevels(mydata)
mydata<-mydata[mydata$chloroMonth!=0 , ]
mydata<-data.frame(mydata)
length(mydata$ID)
sapply(split(mydata$chloroMonth,mydata$ID),length)
mydata<-droplevels(mydata)
sapply(split(mydata$chloroMonth,mydata$ID),length)
mydata <- mydata[!(as.numeric(mydata$ID) %in% which(table(mydata$ID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$ID))
head(mydata)
#############################################################################
# find locations within certain lat/lon distance in r, distance given in
# metres location of High Island. Drop those within a certain radius
#############################################################################
mylat <- 53.5464
mylon <- -10.2572
lat<-mydata$lat
lon<-mydata$lon
list1 <- data.frame(lon,lat)
list2<- data.frame(mylon,mylat)
library(geosphere)
mat <- distm(list1[,c('lon','lat')], list2[,c('mylon','mylat')], fun=distVincentyEllipsoid)
###########################################################################
# packages
library(sp)
library(rgdal)
library(adehabitatLT)
library(momentuHMM)
library(dplyr)
library(data.table)
#############################################################################
# load data
#############################################################################
rm(list=ls())
# setwd("C:\\Users\\adamdkane\\Desktop\\Science\\Manx Shearwater")
setwd("C:/Users/akane/Desktop/Science/Manuscripts/Manx Shearwater tracking study\\ManxTracks")
mydata<-read.csv("manxHI.csv",header = T,sep=",")
head(mydata)
#############################################################################
# drop unused columns
#############################################################################
drops <- c("Altitude","Speed","Course","Type","Distance","Essential","ID","Year","count")
mydata<-mydata[ , !(names(mydata) %in% drops)]
head(mydata)
#############################################################################
# combine date and time into one column and covert time to class POSIXct
#############################################################################
mydata$dateTime<-as.POSIXct(paste(mydata$Date, mydata$Time), format="%d/%m/%Y %H:%M:%S")
#mydata$Time<-as.POSIXct(mydata$Time, format="%H:%M:%S")
head(mydata)
#############################################################################
# remove rows with no values for latitude or longitude
#############################################################################
mydata<-mydata[complete.cases(mydata$Latitude),]
mydata<-mydata[complete.cases(mydata$Longitude),]
head(mydata)
#coordinates(mydata) = ~Longitude+Latitude
# plot(mydata$Longitude, mydata$Latitude)
#############################################################################
# count the number of relocations per bird
#############################################################################
sapply(split(mydata$Latitude,mydata$Bird_ID),length)
length(levels(mydata$Bird_ID))
#############################################################################
# drop the birds that have fewer than 20 relocations
#############################################################################
mydata <- mydata[!(as.numeric(mydata$Bird_ID) %in% which(table(mydata$Bird_ID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$Bird_ID))
head(mydata)
#############################################################################
# measure the time difference between points for each bird ID using dplyr
# - Group your data by ID
# - Compute time diffs between each timestamp in your group (the 1st time diff is NA)
# - Create a new ID that counts no of prior time gaps that are large (e.g. > 20 mins)
#############################################################################
mydata<- mydata %>%
group_by(Bird_ID) %>%
mutate(timeDiff = c(NA, difftime(tail(dateTime, -1), head(dateTime, -1), units="min"))) %>%
mutate(newID = paste0(Bird_ID, cumsum(!is.na(timeDiff) & timeDiff > 20))) %>%
ungroup()
mydata<-data.frame(mydata)
mydata$newID<-as.factor(mydata$newID)
head(mydata)
length(levels(factor(mydata$newID)))
#############################################################################
# drop the new bird IDs that have fewer than 20 relocations
#############################################################################
sapply(split(mydata$Latitude,mydata$newID),length)
length(levels(mydata$newID))
mydata <- mydata[!(as.numeric(mydata$newID) %in% which(table(mydata$newID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$newID))
head(mydata)
#############################################################################
# find locations within certain lat/lon distance in r, distance given in
# metres location of High Island. Drop those within a certain radius
#############################################################################
mylat <- 53.5464
mylon <- -10.2572
lat<-mydata$lat
lon<-mydata$lon
list1 <- data.frame(lon,lat)
list2<- data.frame(mylon,mylat)
library(geosphere)
mat <- distm(list1[,c('lon','lat')], list2[,c('mylon','mylat')], fun=distVincentyEllipsoid)
mydata$distance <- apply(mat, 1, min)/1000
head(mydata)
max(mydata$distance)
plot(mydata$x,mydata$y)
plot(mydata$x[mydata$distance<5],mydata$y[mydata$distance<5])
mydata <- mydata[mydata$distance >5, ]
#############################################################################
# create a trajectory object using adehabitatLT
#############################################################################
tr<-as.ltraj(data.frame(X=mydata$Longitude,Y=mydata$Latitude),date=mydata$dateTime,id=mydata$newID,typeII=T) #create trajectory
tstep<-300 #time step we want for the interpolation, in seconds, 300 secs = 5 mins
newtr<-redisltraj(tr, u=tstep, type = "time")
#############################################################################
# Prep for HMM
#############################################################################
mydata<-ld(newtr)
names(mydata)[names(mydata) == 'x'] <- 'lon'
names(mydata)[names(mydata) == 'y'] <- 'lat'
head(mydata)
tail(mydata)
# prep data for upload to movebank
mydataMovebank<-mydata[,c("id","lon","lat","date")]
# write.csv(mydataMovebank,file="mydataMovebank.csv")
#############################################################################
# Load in data with Movebank covariates
#############################################################################
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\Manx Shearwater tracking study\\ManxTracks\\manxMovebank")
mydata<-read.csv("manxMovebank.csv",header = T,sep = ",")
head(mydata)
mydata<-mydata[,c("location.long","location.lat","individual.local.identifier","ETOPO1.Elevation", "MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A")]
head(mydata)
names(mydata)[names(mydata) == 'location.long'] <- 'long'
names(mydata)[names(mydata) == 'location.lat'] <- 'lat'
names(mydata)[names(mydata) == 'individual.local.identifier'] <- 'ID'
names(mydata)[names(mydata) == 'ETOPO1.Elevation'] <- 'bath'
names(mydata)[names(mydata) == 'MODIS.Ocean.Aqua.OceanColor.4km.Monthly.Chlorophyll.A'] <- 'chloroMonth'
head(mydata)
# drop the levels that don't have chlorophyll data, no need to do this for bathymetry
length(mydata$ID)
# remove NAs chlorophyll values
mydata <- mydata %>%
dplyr:: mutate(chloroMonth = ifelse(is.na(chloroMonth),0,chloroMonth))
mydata<-group_by(mydata, ID) %>%
dplyr::mutate(first2 = min(which(chloroMonth == 0 | row_number() == n()))) %>%
filter(row_number() <= first2) %>%
dplyr::select(-first2)
length(mydata$ID)
mydata<-droplevels(mydata)
mydata<-mydata[mydata$chloroMonth!=0 , ]
mydata<-data.frame(mydata)
length(mydata$ID)
sapply(split(mydata$chloroMonth,mydata$ID),length)
mydata<-droplevels(mydata)
sapply(split(mydata$chloroMonth,mydata$ID),length)
mydata <- mydata[!(as.numeric(mydata$ID) %in% which(table(mydata$ID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$ID))
head(mydata)
#############################################################################
# project to UTM coordinates using package rgdal
#############################################################################
llcoord <- SpatialPoints(mydata[,1:2],
proj4string=CRS("+proj=longlat +datum=WGS84"))
utmcoord <- spTransform(llcoord,CRS("+proj=utm +zone=29 ellps=WGS84")) # 29 = IRE or 30 = UK
# add UTM locations to data frame
mydata$x <- attr(utmcoord,"coords")[,1]
mydata$y <- attr(utmcoord,"coords")[,2]
#############################################################################
# Prepare the data to be analysed using the HMM
#############################################################################
# mydata<-mydata[,c("id","x","y")]
# names(mydata)[names(mydata) == 'id'] <- 'ID'
head(mydata)
#############################################################################
# Manx Shearwater Tracking Study
# - note that some birds were tracked in 2 seasons
#############################################################################
# packages
library(sp)
library(rgdal)
library(adehabitatLT)
library(momentuHMM)
library(dplyr)
library(data.table)
#############################################################################
# load data
#############################################################################
rm(list=ls())
# setwd("C:\\Users\\adamdkane\\Desktop\\Science\\Manx Shearwater")
setwd("C:/Users/akane/Desktop/Science/Manuscripts/Manx Shearwater tracking study\\ManxTracks")
mydata<-read.csv("manxHI.csv",header = T,sep=",")
head(mydata)
#############################################################################
# drop unused columns
#############################################################################
drops <- c("Altitude","Speed","Course","Type","Distance","Essential","ID","Year","count")
mydata<-mydata[ , !(names(mydata) %in% drops)]
head(mydata)
#############################################################################
# combine date and time into one column and covert time to class POSIXct
#############################################################################
mydata$dateTime<-as.POSIXct(paste(mydata$Date, mydata$Time), format="%d/%m/%Y %H:%M:%S")
#mydata$Time<-as.POSIXct(mydata$Time, format="%H:%M:%S")
head(mydata)
#############################################################################
# remove rows with no values for latitude or longitude
#############################################################################
mydata<-mydata[complete.cases(mydata$Latitude),]
mydata<-mydata[complete.cases(mydata$Longitude),]
head(mydata)
#coordinates(mydata) = ~Longitude+Latitude
# plot(mydata$Longitude, mydata$Latitude)
#############################################################################
# count the number of relocations per bird
#############################################################################
sapply(split(mydata$Latitude,mydata$Bird_ID),length)
length(levels(mydata$Bird_ID))
#############################################################################
# drop the birds that have fewer than 20 relocations
#############################################################################
mydata <- mydata[!(as.numeric(mydata$Bird_ID) %in% which(table(mydata$Bird_ID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$Bird_ID))
head(mydata)
#############################################################################
# measure the time difference between points for each bird ID using dplyr
# - Group your data by ID
# - Compute time diffs between each timestamp in your group (the 1st time diff is NA)
# - Create a new ID that counts no of prior time gaps that are large (e.g. > 20 mins)
#############################################################################
mydata<- mydata %>%
group_by(Bird_ID) %>%
mutate(timeDiff = c(NA, difftime(tail(dateTime, -1), head(dateTime, -1), units="min"))) %>%
mutate(newID = paste0(Bird_ID, cumsum(!is.na(timeDiff) & timeDiff > 20))) %>%
ungroup()
mydata<-data.frame(mydata)
mydata$newID<-as.factor(mydata$newID)
head(mydata)
length(levels(factor(mydata$newID)))
#############################################################################
# drop the new bird IDs that have fewer than 20 relocations
#############################################################################
sapply(split(mydata$Latitude,mydata$newID),length)
length(levels(mydata$newID))
mydata <- mydata[!(as.numeric(mydata$newID) %in% which(table(mydata$newID)<20)),]
mydata <- droplevels(mydata)
length(levels(mydata$newID))
head(mydata)
#############################################################################
# find locations within certain lat/lon distance in r, distance given in
# metres location of High Island. Drop those within a certain radius
#############################################################################
mylat <- 53.5464
mylon <- -10.2572
lat<-mydata$lat
lon<-mydata$lon
list1 <- data.frame(lon,lat)
list2<- data.frame(mylon,mylat)
library(geosphere)
mat <- distm(list1[,c('lon','lat')], list2[,c('mylon','mylat')], fun=distVincentyEllipsoid)
mydata$distance <- apply(mat, 1, min)/1000
#############################################################################
# find locations within certain lat/lon distance in r, distance given in
# metres location of High Island. Drop those within a certain radius
#############################################################################
mylat <- 53.5464
mylon <- -10.2572
lat<-mydata$Latitude
lon<-mydata$Longitude
list1 <- data.frame(lon,lat)
list2<- data.frame(mylon,mylat)
library(geosphere)
mat <- distm(list1[,c('lon','lat')], list2[,c('mylon','mylat')], fun=distVincentyEllipsoid)
mydata$distance <- apply(mat, 1, min)/1000
head(mydata)
max(mydata$distance)
plot(mydata$x,mydata$y)
max(mydata$distance)
plot(mydata$Longitude,mydata$Latitude)
plot(mydata$Longitude[mydata$distance>5],mydata$Latitude[mydata$distance>5])
plot(mydata$Longitude[mydata$distance<5],mydata$Latitude[mydata$distance<5])
mydata <- mydata[mydata$distance >5, ]
#############################################################################
# create a trajectory object using adehabitatLT
#############################################################################
tr<-as.ltraj(data.frame(X=mydata$Longitude,Y=mydata$Latitude),date=mydata$dateTime,id=mydata$newID,typeII=T) #create trajectory
tstep<-300 #time step we want for the interpolation, in seconds, 300 secs = 5 mins
newtr<-redisltraj(tr, u=tstep, type = "time")
#############################################################################
# Prep for HMM
#############################################################################
mydata<-ld(newtr)
names(mydata)[names(mydata) == 'x'] <- 'lon'
names(mydata)[names(mydata) == 'y'] <- 'lat'
head(mydata)
tail(mydata)
# prep data for upload to movebank
mydataMovebank<-mydata[,c("id","lon","lat","date")]
write.csv(mydataMovebank,file="mydataMovebankBuffer.csv")
# Changepoint Analysis in R
rm(list=ls())
library(pageviews)
library(changepoint)
library(dplyr)
library(pageviews)
library(data.table)
# load in the data which is a vector of species names
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\Documentary analysis\\Documentary-analysis")
data<-read.csv("mentionedNames.csv", header = TRUE, sep = ",")
get_wiki <- function(x){article_pageviews(project = "en.wikipedia", article = x
, start = as.Date('2016-01-01'), end = as.Date("2017-12-31")
, user_type = "user", platform = c("mobile-web"))
}
data.new<-data[!duplicated(data), ]
output<-data.new %>%  get_wiki
output
dat.grp <- group_by(output, article)
head(dat.grp)
mvalue = dat.grp %>% cpt.mean(dat.grp, method="BinSeg",Q=2)
mvalue = dat.grp %>% cpt.mean(dat.grp$views, method="BinSeg",Q=2)
mvalue = dat.grp %>% cpt.mean(as.numeric(dat.grp$views), method="BinSeg",Q=2)
as.numeric(dat.grp$views)
mvalue = dat.grp %>% cpt.mean(ts(dat.grp$views), method="BinSeg",Q=2)
dat.grp$views
class(dat.grp$views)
dat.grp %>%
select(article, views) %>%
head
dat.grp %>%
select(article, views) %>%
do(cpt.mean(.))
blah <- function(x) {
x$position <- 1:nrow(x)
x$count <- nrow(x)
return(x)
}
mtcars %>% group_by(cyl, am) %>% do(blah(.))
dat.grp %>%
select(article, ts(views)) %>%
do(cpt.mean(.))
dat.grp %>%
select(article, views) %>%
do(cpt.mean(.))
dat.grp %>%
select(article, as.numeric(views)) %>%
do(cpt.mean(.))
dat.grp %>%
select(article, as.numeric(views)) %>%
do(cpt.mean(.))
dat.grp %>%
select(article, views) %>%
do(cpt.mean(.))
mvalue = dat.grp %>% cpt.mean(ts(dat.grp$views), method="BinSeg",Q=2)
data.new
articles <- c("rugby", "football")
blah <- function(x){article_pageviews(project = "en.wikipedia", article = x
, start = as.Date('2017-01-01'), end = as.Date("2017-12-31")
, user_type = "user", platform = c("mobile-web"))
}
output<-articles %>% blah
output
articles <- c("Rugby_union", "Football")
# retrieve the page hits to perform the time series
blah <- function(x){article_pageviews(project = "en.wikipedia", article = x
, start = as.Date('2017-01-01'), end = as.Date("2017-12-31")
, user_type = "user", platform = c("mobile-web"))
}
output<-articles %>% blah
output
tail (output)
articles <- c("Rugby_union", "Football")
# retrieve the page hits to perform the time series
blah <- function(x){article_pageviews(project = "en.wikipedia", article = x
, start = as.Date('2017-01-01'), end = as.Date("2017-12-31")
, user_type = "user", platform = c("mobile-web"))
}
output<-articles %>% blah
dat.grp %>%
select(article, views) %>%
do(cpt.mean(.))
class(dat.grp$views)
